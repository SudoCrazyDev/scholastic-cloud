name: Deploy API to Production

on:
  push:
    branches: [ main ]
    paths:
      - 'api/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: prod
    env:
      ZIP_NAME: api-deployment-${{ github.run_id }}-${{ github.sha }}.zip
    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Setup PHP
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, iconv, json, mbstring, pdo

      # Step 3: Cache Composer dependencies
      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: api/vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      # Step 4: Install Composer dependencies
      - name: Install Composer dependencies
        run: |
          cd api
          composer install --optimize-autoloader --no-dev

      # Step 7: Clear and cache Laravel configurations
      - name: Optimize Laravel
        run: |
          cd api
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache

      # Step 8: Create deployment package (excluding node_modules and vendor)
      - name: Create deployment package
        run: |
          # Create a temporary directory for deployment files
          mkdir -p deploy-temp
          
          # Copy API files excluding node_modules, vendor, and other unwanted files
          rsync -av --exclude='node_modules' \
                   --exclude='.git' \
                   --exclude='.env.example' \
                   --exclude='tests' \
                   --exclude='phpunit.xml' \
                   --exclude='Dockerfile' \
                   --exclude='README.md' \
                   api/ deploy-temp/
          
          # Create deployment zip file
          cd deploy-temp
          zip -r ../${ZIP_NAME} .
          cd ..
          
          # Move zip to a dedicated upload directory
          mkdir -p deploy-out
          mv -f ${ZIP_NAME} deploy-out/

      # Step 8.5: Verify zip exists
      - name: Verify deployment zip exists
        run: |
          echo "Runner working directory: $(pwd)"
          ls -lah
          echo "Contents of deploy-out/"
          ls -lah deploy-out

      # Step 9: Upload zip file to server via SFTP
      - name: Upload deployment zip (SFTP)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEPLOYMENT_SSH_SERVER }}
          username: ${{ secrets.DEPLOYMENT_SSH_USERNAME }}
          password: ${{ secrets.DEPLOYMENT_SSH_PASSWORD }}
          port: ${{ secrets.DEPLOYMENT_SSH_PORT }}
          source: "deploy-out/${{ env.ZIP_NAME }}"
          target: "~/domains/scholastic.cloud/public_html/v2/"

      # Step 10: Extract on server (extract zip from deploy-out/ into parent directory)
      - name: Extract deployment package on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOYMENT_SSH_SERVER }}
          username: ${{ secrets.DEPLOYMENT_SSH_USERNAME }}
          password: ${{ secrets.DEPLOYMENT_SSH_PASSWORD }}
          port: ${{ secrets.DEPLOYMENT_SSH_PORT }}
          script: |
            set -e
            cd ~/domains/scholastic.cloud/public_html/v2/
            echo "Current dir: $(pwd)"
            echo "Looking for zip inside deploy-out/"
            ls -lah deploy-out || true
            ZIP_FILE=$(ls -1 deploy-out/*.zip 2>/dev/null | tail -n 1)
            if [ -z "$ZIP_FILE" ]; then
              echo "No zip file found in deploy-out/" && exit 1
            fi
            echo "Found zip: $ZIP_FILE"

            # Backup existing api directory
            if [ -d "api" ]; then
              mv api api-backup-$(date +%Y%m%d-%H%M%S)
            fi

            # Extract into parent (v2) under api/
            unzip -o "$ZIP_FILE" -d api/

            # Optional permissions (shared hosting typical)
            chmod -R 755 api/
            chmod -R 775 api/storage api/bootstrap/cache || true

            # Remove uploaded zip after extraction
            rm -f "$ZIP_FILE"

      # Step 10: Post-deployment cleanup
      - name: Cleanup deployment files
        run: |
          rm -rf deploy-temp deploy-out
